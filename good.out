mcastro@mcastro-X401A1:~/PascalCompiler$ java Lexer good.pas

***************************************************************
*                         First Delivery                      *
***************************************************************

                       TOKENS  	IMAGE
                       ------  	-----
                    <PROGRAM>  	program
                         <ID>  	TestProgram
                  <SEMICOLON>  	;
                        <VAR>  	var
                         <ID>  	x
                      <COMMA>  	,
                         <ID>  	y
                      <COMMA>  	,
                         <ID>  	z
                      <COLON>  	:
                    <INTEGER>  	integer
                  <SEMICOLON>  	;
                        <VAR>  	var
                         <ID>  	x
                      <COMMA>  	,
                         <ID>  	y
                      <COMMA>  	,
                         <ID>  	z
                      <COLON>  	:
                       <CHAR>  	char
                  <SEMICOLON>  	;
                      <BEGIN>  	begin
                      <WRITE>  	write
                     <LPAREN>  	(
                   <QUOTESTR>  	"Enter number to count to from 0: "
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                       <READ>  	read
                     <LPAREN>  	(
                         <ID>  	x
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                      <WRITE>  	write
                     <LPAREN>  	(
                   <QUOTESTR>  	"You entered: "
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                    <WRITELN>  	writeln
                     <LPAREN>  	(
                         <ID>  	x
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                         <ID>  	z
                     <ASSIGN>  	:=
                     <NUMBER>  	0
                  <SEMICOLON>  	;
                      <WHILE>  	while
                     <LPAREN>  	(
                         <ID>  	z
                       <LESS>  	<
                         <ID>  	x
                     <RPAREN>  	)
                         <DO>  	do
                      <BEGIN>  	begin
                      <WRITE>  	write
                     <LPAREN>  	(
                         <ID>  	z
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                      <WRITE>  	write
                     <LPAREN>  	(
                   <QUOTESTR>  	", "
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                         <ID>  	z
                     <ASSIGN>  	:=
                         <ID>  	z
                     <ADD_OP>  	+
                     <NUMBER>  	1
                  <SEMICOLON>  	;
                        <END>  	end
                  <SEMICOLON>  	;
                    <WRITELN>  	writeln
                     <LPAREN>  	(
                         <ID>  	z
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                    <WRITELN>  	writeln
                     <LPAREN>  	(
                        <ORD>  	ord
                     <LPAREN>  	(
                    <LITCHAR>  	'0'
                     <RPAREN>  	)
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                         <ID>  	y
                     <ASSIGN>  	:=
                         <ID>  	z
                    <MULT_OP>  	*
                     <LPAREN>  	(
                         <ID>  	z
                     <ADD_OP>  	+
                        <ORD>  	ord
                     <LPAREN>  	(
                    <LITCHAR>  	'0'
                     <RPAREN>  	)
                <SUBTRACT_OP>  	-
                     <NUMBER>  	3
                     <RPAREN>  	)
                     <ADD_OP>  	+
                         <ID>  	x
                     <DIV_OP>  	/
                     <NUMBER>  	2
                  <SEMICOLON>  	;
                    <WRITELN>  	writeln
                     <LPAREN>  	(
                         <ID>  	y
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                         <IF>  	if
                     <LPAREN>  	(
                         <ID>  	x
                    <GREATER>  	>
                         <ID>  	y
                     <RPAREN>  	)
                       <THEN>  	then
                      <BEGIN>  	begin
                    <WRITELN>  	writeln
                     <LPAREN>  	(
                   <QUOTESTR>  	"x is bigger than y"
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                        <END>  	end
                  <SEMICOLON>  	;
                       <ELSE>  	else
                      <BEGIN>  	begin
                    <WRITELN>  	writeln
                     <LPAREN>  	(
                   <QUOTESTR>  	"x isn't bigger than y"
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                        <END>  	end
                  <SEMICOLON>  	;
                         <IF>  	if
                     <LPAREN>  	(
                         <ID>  	z
                      <EQUAL>  	=
                         <ID>  	x
                     <RPAREN>  	)
                       <THEN>  	then
                      <BEGIN>  	begin
                    <WRITELN>  	writeln
                     <LPAREN>  	(
                   <QUOTESTR>  	"z is equal to x"
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                        <END>  	end
                  <SEMICOLON>  	;
                         <ID>  	x
                     <ASSIGN>  	:=
                     <NUMBER>  	65
                  <SEMICOLON>  	;
                      <WHILE>  	while
                     <LPAREN>  	(
                         <ID>  	x
                       <LESS>  	<
                     <NUMBER>  	90
                     <RPAREN>  	)
                         <DO>  	do
                      <BEGIN>  	begin
                      <WRITE>  	write
                     <LPAREN>  	(
                        <CHR>  	chr
                     <LPAREN>  	(
                         <ID>  	x
                     <RPAREN>  	)
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                      <WRITE>  	write
                     <LPAREN>  	(
                   <QUOTESTR>  	", "
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                         <ID>  	x
                     <ASSIGN>  	:=
                         <ID>  	x
                     <ADD_OP>  	+
                     <NUMBER>  	1
                  <SEMICOLON>  	;
                        <END>  	end
                  <SEMICOLON>  	;
                      <WRITE>  	write
                     <LPAREN>  	(
                        <CHR>  	chr
                     <LPAREN>  	(
                         <ID>  	x
                     <RPAREN>  	)
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                      <WRITE>  	write
                     <LPAREN>  	(
                        <CHR>  	chr
                     <LPAREN>  	(
                         <ID>  	x
                     <RPAREN>  	)
                     <RPAREN>  	)
                  <SEMICOLON>  	;
                        <END>  	end
                     <PERIOD>  	.
*********************Symbol table contents*********************
format: image_of_token = [ list, of, identifiers ]
{x=[<INTEGER_ID:x>, <CHAR_ID:x>], z=[<INTEGER_ID:z>, <CHAR_ID:z>], TestProgram=[<PROGRAM_ID:TestProgram>], y=[<INTEGER_ID:y>, <CHAR_ID:y>]}

mcastro@mcastro-X401A1:~/PascalCompiler$ 
